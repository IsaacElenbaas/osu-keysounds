#!/usr/bin/bash

#{{{ init
shopt -s extglob
nomods=true
volume=60
rate="$(xset q 2>/dev/null | while IFS= read -r line; do [ "${line#*repeat rate}" != "$line" ] && printf "%s\n" "$line"; done)"
rate="${rate##* }"
lower=false
usage="Usage: $(basename $0) [OPTIONS]
  -m, --mods, --modifiers     do not ignore modifier keys
  -v, --vol, --volume NUM     sound volume, 1-100, default 60
  -r, --rate NUM              maximum number of sounds per second, defaults to keyrepeat rate
  -l, --lower, --lowercase    treat everything as lowercase (do not use key-caps.wav)
  -h, --help                  display this help
"

	#{{{ parameter parsing
for (( i=1; i <= $#; i++ )); do
	[ "${!i:0:1}" != "-" ] && { printf "$usage" >&2; exit 2; }
	if [ "${!i:1:1}" = "-" ]; then

		#{{{ long parameters
		case "${!i}" in
			--modifiers | --mods)
				nomods=false
			;;
			--volume | --vol)
				i=$((i+1))
				volume="${!i}"
			;;
			--rate)
				i=$((i+1))
				rate="${!i}"
			;;
			--lower | --lowercase)
				lower=true
			;;
			--help)
				printf "$usage"
				exit
			;;
			*)
				printf "$usage"
				exit 2
			;;
		esac
		#}}}

	else

		#{{{ short parameters
		bumped=false
		case "${!i}" in
			*m*)
				nomods=false
			;;&
			*v*)
				[ "$bumped" = false ] && i=$((i+1)) && bumped=true
				volume="${!i}"
			;;&
			*r*)
				[ "$bumped" = false ] && i=$((i+1)) && bumped=true
				rate="${!i}"
			;;&
			*l*)
				lower=true
			;;&
			*h*)
				printf "$usage"
				exit 0
			;;
			!(-+([mvrl])))
				printf "$usage"
				exit 2
			;;
		esac
		#}}}

	fi
done
	#}}}

	#{{{ parameter validation
		#{{{ volume
case "$volume" in
	""|"0"|*[!0-9.]*)
		printf "$usage" >&2
		exit 2
	;;
esac
		#}}}

		#{{{ rate
case "$rate" in
	""|"0"|*[!0-9]*)
		printf "$usage" >&2
		exit 2
	;;
esac
		#}}}
	#}}}

volume=$((65536*volume/100))
rate="00$((1000/$rate))"
rate="${rate:: -3}.${rate: -3}"
rate="${rate#${rate%%[!0]*}}"
[ "${rate::1}" != "." ] || rate="0$rate"

cp -n "$(dirname "${BASH_SOURCE[0]}")"/*.wav /dev/shm/ || { printf "Unable to cache in /dev/shm!"; exit 1; }

	#{{{ keycode:sound mapping
declare -A sounds
while read a keycode b key c; do
	case "$key" in
		Control_[LR] | Alt_[LR] | Super_[LR])
			sounds[$keycode]="m"
		;;
		Shift_[LR])
			sounds[$keycode]="s"
		;;
		Return | KP_Enter)
			sounds[$keycode]="c"
		;;
		BackSpace | Delete)
			sounds[$keycode]="d"
		;;
		   Left |    Up |    Down |    Right |    Home |    End |    Prior |    Next |\
		KP_Left | KP_Up | KP_Down | KP_Right | KP_Home | KP_End | KP_Prior | KP_Next |\
		XF86ScrollUp | XF86ScrollDown)
			sounds[$keycode]="n"
		;;
	esac
done < <(xmodmap -pke)
	#}}}
#}}}

#{{{ main
coproc rateLimiter {
	read rate
	printf "1"
	while true; do
		read -t $rate
		printf "1"
	done
}
printf "$rate\n" >&"${rateLimiter[1]}"
shift=false
while IFS= read -r event; do
	IFS= read -r line
	IFS= read -r line
	line="${line##* }"
	[ "$event" != "EVENT type 14 (RawKeyRelease)" ] || {
		[ "${sounds[$line]}" = "s" ] && shift=false
		continue
	}

	#{{{ play sound for keycode
	case "${sounds[$line]}" in
		s)
			shift=true
		;&
		m)
			[ $nomods = true ] && continue
		;&
		*)
			{ read -t 0 && read -n 1; } <&3 || continue
		;;&
		c)
			{ paplay /dev/shm/key-confirm.wav --volume=$volume & } &>/dev/null
		;;
		d)
			{ paplay /dev/shm/key-delete.wav --volume=$volume & } &>/dev/null
		;;
		n)
			{ paplay /dev/shm/key-movement.wav --volume=$volume & } &>/dev/null
		;;
		*)
			if [ $shift = true ] && [ "${sounds[$line]}" != "s" ] && [ $lower != true ]; then
				{ paplay /dev/shm/key-caps.wav --volume=$volume & } &>/dev/null
			else
				{ paplay /dev/shm/key-press-$(($RANDOM%4+1)).wav --volume=$volume & } &>/dev/null
			fi
		;;
	esac
	#}}}

done < <(
	xinput --test-xi2 --root | {

	#{{{ filter
		if command -v grep &>/dev/null; then
			grep --line-buffered -A 2 --no-group-separator -x -e "EVENT type 2 (KeyPress)" -e "EVENT type 14 (RawKeyRelease)"
		else
			while IFS= read -r line; do
				{ [ "$line" = "EVENT type 2 (KeyPress)" ] || [ "$line" = "EVENT type 14 (RawKeyRelease)" ]; } && {
					printf "%s\n" "$line"
					IFS= read -r line; printf "%s\n" "$line"
					IFS= read -r line; printf "%s\n" "$line"
				}
			done
		fi
	#}}}

	}
) 3<&"${rateLimiter[0]}"
#}}}
